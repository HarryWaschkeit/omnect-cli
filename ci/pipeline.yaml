resource_types:
  - name: email
    type: docker-image
    source:
      repository: ((bb_registry_name))/clone/pcfseceng/email-resource
      username: ((bb_registry_user))
      password: ((bb_registry_password))
      tag: 1.0.19
      insecure_registries: ((bb_insecure_registries))

resources:
  - name: source
    type: git
    source:
      uri: ((git_source))
      private_key: ((privatekey))
      branch: ((git_branch))
      skip_ssl_verification: ((git_skip_ssl_verification))
      fetch_tags: true
      depth: 1

  - name: ics-dm-cli-backend-image
    type: docker-image
    source:
      repository: ((bb_registry_name))/ics-dm-cli-backend
      username: ((bb_registry_user))
      password: ((bb_registry_password))
      insecure_registries: ((bb_insecure_registries))
    check_every: never

  - name: rust-image
    type: docker-image
    source:
      repository: ((bb_registry_name))/rust
      username: ((bb_registry_user))
      password: ((bb_registry_password))
      tag: latest
      insecure_registries: ((bb_insecure_registries))

  - name: concourse-rust-dnd
    type: docker-image
    source:
      repository: ((bb_registry_name))/concourse-rust-dnd
      username: ((bb_registry_user))
      password: ((bb_registry_password))
      tag: latest
      insecure_registries: ((bb_insecure_registries))

  - name: send-an-email
    type: email
    source:
      smtp:
        host: ((email_smtp_host_url))
        port: ((email_smtp_port))
        anonymous: ((email_smtp_anonymous))
        username: ((email_smtp_user))
        password: ((email_smtp_pw))
        skip_ssl_validation: ((email_smtp_skip_ssl_validation))
        ca_cert: ((email_smtp_ca_cert))
        host_origin: ((email_smtp_host_origin))
        login_auth: ((email_smtp_login_auth))
      from:  ((email_from))
      to: ((email_to))
    check_every: never

email_success_notification: &email_success_notification
  put: send-an-email
  params:
    subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} successfully finished"
    body_text: |
      Yeah!
      Build ID: "${BUILD_ID}"
      Build Name: "${BUILD_NAME}"
      Build Job Name: "${BUILD_JOB_NAME}"
      Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
      ATC External URL: "${ATC_EXTERNAL_URL}"

email_failure_notification: &email_failure_notification
  put: send-an-email
  params:
    subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} failed!"
    body_text: |
      Oh no!
      Build ID: "${BUILD_ID}"
      Build Name: "${BUILD_NAME}"
      Build Job Name: "${BUILD_JOB_NAME}"
      Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
      ATC External URL: "${ATC_EXTERNAL_URL}"

email_error_notification: &email_error_notification
  put: send-an-email
  params:
    subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} error!"
    body_text: |
      Oh no!
      Build ID: "${BUILD_ID}"
      Build Name: "${BUILD_NAME}"
      Build Job Name: "${BUILD_JOB_NAME}"
      Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
      ATC External URL: "${ATC_EXTERNAL_URL}"

email_abort_notification: &email_abort_notification
  put: send-an-email
  params:
    subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} aborted!"
    body_text: |
      Oh no!
      Build ID: "${BUILD_ID}"
      Build Name: "${BUILD_NAME}"
      Build Job Name: "${BUILD_JOB_NAME}"
      Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
      ATC External URL: "${ATC_EXTERNAL_URL}"

jobs:
  - name: build-and-deploy-ics-dm-cli
    public: true
    on_failure: *email_failure_notification
    on_success: *email_success_notification
    on_abort: *email_abort_notification
    on_error: *email_error_notification
    plan:
      - in_parallel:
        - get: source
          trigger: true
        - get: rust-image
        - get: concourse-rust-dnd
      - task: build-ics-dm-cli
        image: rust-image
        config:
          platform: linux
          inputs:
            - name: source
          outputs:
            - name: cargo_home
            - name: source
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                export CARGO_HOME=$(pwd)/cargo_home
                chmod -R o+w source
                chmod -R o+w cargo_home
                cd source
                /usr/local/bin/entrypoint.sh cargo build --release --locked;
                chown ${GROUP_ID}:${USER_ID} target/release/ics-dm-cli
                mv target/release/ics-dm-cli backend
                backend/ics-dm-cli --version | awk '{print $2}' > tag
          params:
            GROUP_ID: "1000"
            USER_ID: "1000"
            ICS_DM_CLI_DOCKER_REG_NAME: "((bb_registry_name))"
      - put: ics-dm-cli-backend-image
        params:
          build: source/backend
          dockerfile: source/backend/Dockerfile
          tag_file: source/tag
          tag_as_latest: true
      - task: test-ics-dm-cli
        image: concourse-rust-dnd
        #dnd needs privileged rights
        privileged: true
        config:
          platform: linux
          inputs:
            - name: cargo_home
            - name: source
          run:
            path: /usr/local/bin/entrypoint.sh
            args:
              - -e
              - |
                export CARGO_HOME=$(pwd)/cargo_home
                set +x
                [[ ! -z "${DOCKER_PASS}" ]] && docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} ${DOCKER_SERVER}
                set -x
                sync
                docker pull ${DOCKER_SERVER}/ics-dm-cli-backend:$(cat source/tag)
                sync

                cd source

                # for now we have to run the integrationtests singlethreaded.
                # we use losetup in the docker backend, which is not safe for
                # parallel usage
                # (https://man7.org/linux/man-pages/man8/losetup.8.html)
                cargo test --locked -- --nocapture --test-threads 1
          params:
            DOCKER_USER: "((bb_registry_user))"
            DOCKER_PASS: "((bb_registry_password))"
            DOCKER_SERVER: "((bb_registry_name))"
            INSECURE_REGISTRIES: "((bb_insecure_registries))"
            ICS_DM_CLI_DOCKER_REG_NAME: "((bb_registry_name))"
