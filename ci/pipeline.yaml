resource_types:
  - name: email
    type: docker-image
    source:
      repository: icsdm.azurecr.io/clone/pcfseceng/email-resource
      username: ((ics_dm_registry_user))
      password: ((ics_dm_registry_password))
      tag: 1.0.19

resources:
  - name: source
    type: git
    source:
      uri: ((git_source))
      private_key: ((privatekey))
      branch: ((git_branch))
      skip_ssl_verification: ((git_skip_ssl_verification))
      fetch_tags: true
      depth: 1

  - name: ics-dm-cli-backend-image
    type: docker-image
    source:
      repository: ((bb_registry_name))/ics-dm-cli-backend
      username: ((bb_registry_user))
      password: ((bb_registry_password))
      insecure_registries: ((bb_insecure_registries))

  - name: rust-image
    type: docker-image
    source:
      repository: rust
      username: ((docker_io_registry_user))
      password: ((docker_io_registry_password))
      tag: slim-buster

  - name: concourse-rust-dnd
    type: docker-image
    source:
      repository: icsdm.azurecr.io/concourse-rust-dnd
      username: ((ics_dm_registry_user))
      password: ((ics_dm_registry_password))
      tag: latest

  - name: send-an-email
    type: email
    source:
      smtp:
        host: ((email_smtp_host_url))
        port: ((email_smtp_port))
        anonymous: ((email_smtp_anonymous))
        username: ((email_smtp_user))
        password: ((email_smtp_pw))
        skip_ssl_validation: ((email_smtp_skip_ssl_validation))
        ca_cert: ((email_smtp_ca_cert))
        host_origin: ((email_smtp_host_origin))
        login_auth: ((email_smtp_login_auth))
      from:  ((email_from))
      to: ((email_to))

jobs:
  - name: build-and-deploy-ics-dm-cli
    public: true
    on_failure:
      put: send-an-email
      params:
        subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} failed!"
        body_text: |
          Oh no!
          Build ID: "${BUILD_ID}"
          Build Name: "${BUILD_NAME}"
          Build Job Name: "${BUILD_JOB_NAME}"
          Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
          ATC External URL: "${ATC_EXTERNAL_URL}"
    on_success:
      put: send-an-email
      params:
        subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} successfully finished"
        body_text: |
          Yeah!
          Build ID: "${BUILD_ID}"
          Build Name: "${BUILD_NAME}"
          Build Job Name: "${BUILD_JOB_NAME}"
          Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
          ATC External URL: "${ATC_EXTERNAL_URL}"
    plan:
      - in_parallel:
        - get: source
          trigger: true
        - get: rust-image
        - get: concourse-rust-dnd
      - task: build-ics-dm-cli
        image: rust-image
        config:
          platform: linux
          inputs:
            - name: source
          outputs:
            - name: cargo_home
            - name: source
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                export CARGO_HOME=$(pwd)/cargo_home
                cd source
                cargo build --release --locked
                chown ${GROUP_ID}:${USER_ID} target/release/ics-dm-cli
                mv target/release/ics-dm-cli backend
                backend/ics-dm-cli --version | awk '{print $2}' > tag
          params:
            GROUP_ID: "1000"
            USER_ID: "1000"
            ICS_DM_CLI_DOCKER_REG_NAME: "((ics_dm_cli_docker_reg_name))"
      - put: ics-dm-cli-backend-image
        params:
          build: source/backend
          dockerfile: source/backend/Dockerfile
          tag_file: source/tag
          tag_as_latest: true
      - task: test-ics-dm-cli
        image: concourse-rust-dnd
        #dnd needs privileged rights
        privileged: true
        config:
          platform: linux
          inputs:
            - name: cargo_home
            - name: source
          run:
            path: /usr/local/bin/entrypoint.sh
            args:
              - -e
              - |
                export CARGO_HOME=$(pwd)/cargo_home
                set +x
                [[ ! -z "${DOCKER_PASS}" ]] && docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} ${DOCKER_SERVER}
                set -x
                sync
                docker pull ${DOCKER_SERVER}/ics-dm-cli-backend:$(cat source/tag)
                sync

                cd source

                # for now we have to run the integrationtests singlethreaded.
                # we use losetup in the docker backend, which is not safe for
                # parallel usage
                # (https://man7.org/linux/man-pages/man8/losetup.8.html)
                cargo test --locked -- --test-threads 1
          params:
            DOCKER_USER: "((bb_registry_user))"
            DOCKER_PASS: "((bb_registry_password))"
            DOCKER_SERVER: "((bb_registry_name))"
            INSECURE_REGISTRIES: "((bb_insecure_registries))"
            ICS_DM_CLI_DOCKER_REG_NAME: "((bb_registry_name))"
